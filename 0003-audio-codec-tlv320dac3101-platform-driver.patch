From 804621b014ae7ec76ac7fda05407d8f4364fbb4e Mon Sep 17 00:00:00 2001
From: Hao <harriszhang6@gmail.com>
Date: Fri, 1 Dec 2017 23:16:31 +0800
Subject: [PATCH 3/3] audio codec tlv320dac3101 platform driver

---
 sound/soc/fsl/imx-tlv320dac3100.c | 307 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 307 insertions(+)
 create mode 100644 sound/soc/fsl/imx-tlv320dac3100.c

diff --git a/sound/soc/fsl/imx-tlv320dac3100.c b/sound/soc/fsl/imx-tlv320dac3100.c
new file mode 100644
index 0000000..2789655
--- /dev/null
+++ b/sound/soc/fsl/imx-tlv320dac3100.c
@@ -0,0 +1,307 @@
+/*
+ * Copyright 2012, 2014 Freescale Semiconductor, Inc.
+ * Copyright 2012 Linaro Ltd.
+ *
+ * The code contained herein is licensed under the GNU General Public
+ * License. You may obtain a copy of the GNU General Public License
+ * Version 2 or later at the following locations:
+ *
+ * http://www.opensource.org/licenses/gpl-license.html
+ * http://www.gnu.org/copyleft/gpl.html
+ */
+
+#include <linux/module.h>
+#include <linux/delay.h>
+#include <linux/of.h>
+#include <linux/of_platform.h>
+#include <linux/of_device.h>
+#include <linux/of_gpio.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/i2c.h>
+#include <linux/clk.h>
+#include <sound/soc.h>
+#include <asm/io.h>
+
+
+#include "../codecs/tlv320aic31xx.h"
+#include "imx-audmux.h"
+
+#define DAI_NAME_SIZE	32
+
+struct imx_tlv320dac3100_data {
+	struct snd_soc_dai_link dai;
+	struct snd_soc_card card;
+	char codec_dai_name[DAI_NAME_SIZE];
+	char platform_name[DAI_NAME_SIZE];
+	struct clk* pll;
+	struct clk *codec_clk;
+	unsigned int clk_frequency;
+};
+
+static int imx_tlv320dac3100_dai_init(struct snd_soc_pcm_runtime *rtd)
+{
+	struct imx_tlv320dac3100_data *data = snd_soc_card_get_drvdata(rtd->card);
+	struct device *dev = rtd->card->dev;
+	int ret;
+
+	ret = snd_soc_dai_set_sysclk(rtd->codec_dai, AIC31XX_PLL_CLKIN_MCLK,
+				     data->clk_frequency, SND_SOC_CLOCK_IN);
+	if (ret) {
+		dev_err(dev, "could not set codec driver clock params\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+static const struct snd_soc_dapm_widget imx_tlv320dac3100_dapm_widgets[] = {
+	SND_SOC_DAPM_MIC("Mic Jack", NULL),
+	SND_SOC_DAPM_SPK("Ext Spk", NULL),
+};
+
+static int imx_tlv320dac3100_audmux_config(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	int int_port, ext_port;
+	int ret;
+
+	ret = of_property_read_u32(np, "mux-int-port", &int_port);
+	if (ret) {
+		dev_err(&pdev->dev, "mux-int-port missing or invalid\n");
+		return ret;
+	}
+	ret = of_property_read_u32(np, "mux-ext-port", &ext_port);
+	if (ret) {
+		dev_err(&pdev->dev, "mux-ext-port missing or invalid\n");
+		return ret;
+	}
+
+	/*
+	 * The port numbering in the hardware manual starts at 1, while
+	 * the audmux API expects it starts at 0.
+	 */
+	int_port--;
+	ext_port--;
+	ret = imx_audmux_v2_configure_port(int_port,
+			IMX_AUDMUX_V2_PTCR_SYN |
+			IMX_AUDMUX_V2_PTCR_TFSEL(ext_port) |
+			IMX_AUDMUX_V2_PTCR_TCSEL(ext_port) |
+			IMX_AUDMUX_V2_PTCR_TFSDIR |
+			IMX_AUDMUX_V2_PTCR_TCLKDIR,
+			IMX_AUDMUX_V2_PDCR_RXDSEL(ext_port));
+	if (ret) {
+		dev_err(&pdev->dev, "audmux internal port setup failed\n");
+		return ret;
+	}
+	ret = imx_audmux_v2_configure_port(ext_port,
+			IMX_AUDMUX_V2_PTCR_SYN,
+			IMX_AUDMUX_V2_PDCR_RXDSEL(int_port));
+	if (ret) {
+		dev_err(&pdev->dev, "audmux external port setup failed\n");
+		return ret;
+	}
+	printk(KERN_INFO "tlv320dac3100 audio mux init ok\n");
+
+	return 0;
+}
+
+static int imx_tlv320dac3100_probe(struct platform_device *pdev)
+{
+	struct device_node *cpu_np, *codec_np;
+	struct platform_device *cpu_pdev;
+	struct i2c_client *codec_dev;
+	struct imx_tlv320dac3100_data *data = NULL;
+	int ret;
+#if 1
+	//int retval;
+	//int rst_gpio;
+	long rate;
+	struct clk *new_parent;
+	//struct clk *ssi_clk;
+	//u32 val = 0;
+#endif
+#if 0
+	/* request reset pin */
+    rst_gpio = of_get_named_gpio(pdev->dev.of_node, "rst-gpios", 0);
+    if (!gpio_is_valid(rst_gpio)) {
+            dev_err(&pdev->dev, "no tlv320dac3100 reset pin available\n");
+            return -EINVAL;
+    }
+    retval = devm_gpio_request_one(&pdev->dev, rst_gpio, GPIOF_OUT_INIT_HIGH,
+                                    "tlv320dac3100_reset");
+printk(KERN_INFO "%s...4, retval: %d\n", __func__, retval);
+    if (retval < 0)
+            return retval;
+
+    gpio_set_value(rst_gpio, 1);
+    msleep(5);
+    gpio_set_value(rst_gpio, 0);
+    msleep(5);
+    gpio_set_value(rst_gpio, 1);
+#endif
+
+	cpu_np = of_parse_phandle(pdev->dev.of_node, "cpu-dai", 0);
+	codec_np = of_parse_phandle(pdev->dev.of_node, "audio-codec", 0);
+	if (!cpu_np || !codec_np) {
+		dev_err(&pdev->dev, "phandle missing or invalid\n");
+		ret = -EINVAL;
+		goto fail;
+	}
+
+	if (strstr(cpu_np->name, "ssi")) {
+		ret = imx_tlv320dac3100_audmux_config(pdev);
+		if (ret)
+			goto fail;
+	}
+
+	cpu_pdev = of_find_device_by_node(cpu_np);
+	if (!cpu_pdev) {
+		dev_err(&pdev->dev, "failed to find SSI platform device\n");
+		ret = -EPROBE_DEFER;
+		goto fail;
+	}
+	codec_dev = of_find_i2c_device_by_node(codec_np);
+	if (!codec_dev) {
+		dev_err(&pdev->dev, "failed to find codec platform device\n");
+		return -EPROBE_DEFER;
+	}
+
+	data = devm_kzalloc(&pdev->dev, sizeof(*data), GFP_KERNEL);
+	if (!data) {
+		ret = -ENOMEM;
+		goto fail;
+	}
+
+#if 0
+	data->codec_clk = devm_clk_get(&codec_dev->dev, NULL);
+	if (IS_ERR(data->codec_clk)) {
+		ret = PTR_ERR(data->codec_clk);
+		dev_err(&codec_dev->dev, "failed to get codec clk: %d\n", ret);
+		goto fail;
+	}
+	rate = clk_round_rate(data->codec_clk, 12000000);
+	clk_set_rate(data->codec_clk, rate);
+	u32 __iomem* cco = ioremap(0x020c4060, 0x20);
+	if (cco) {
+		writel(0x11e01fb, cco);
+		val = readl(cco);
+		iounmap(cco);
+	}
+	ret = clk_prepare_enable(data->codec_clk);
+	if (ret)
+		return ret;
+	printk(KERN_INFO "round clock rate: %d, cco value: 0x%x\n", rate, val);
+#else
+	new_parent = devm_clk_get(&codec_dev->dev, "cko1");
+	if (IS_ERR(new_parent)) {
+		pr_err("Could not get \"cko2\" clock \n");
+		return -EPROBE_DEFER;
+	}
+	data->codec_clk = devm_clk_get(&codec_dev->dev, "cko");
+	if (IS_ERR(data->codec_clk)) {
+		pr_err("Could not get \"cko\" clock \n");
+		return -EPROBE_DEFER;
+	}
+	rate = clk_round_rate(new_parent, 12000000);
+	clk_set_rate(new_parent, rate);
+	clk_set_parent(data->codec_clk, new_parent);
+	rate = clk_round_rate(data->codec_clk, 12000000);
+	clk_set_rate(data->codec_clk, rate);
+	data->pll = new_parent;
+	//u32 __iomem* cco = ioremap(0x020c4060, 0x20);
+	//if (cco) {
+	//	val = readl(cco);
+	//	iounmap(cco);
+	//}
+	ret = clk_prepare_enable(data->codec_clk);
+	if (ret)
+		return ret;
+	//printk(KERN_INFO "round clock rate: %d, cco value: 0x%x\n", rate, val);
+#endif
+
+	data->clk_frequency = clk_get_rate(data->codec_clk);
+
+	data->dai.name = "HiFi";
+	data->dai.stream_name = "HiFi";
+	data->dai.codec_dai_name = "tlv320dac31xx-hifi";
+	data->dai.codec_of_node = codec_np;
+	data->dai.cpu_of_node = cpu_np;
+	data->dai.platform_of_node = cpu_np;
+	data->dai.init = &imx_tlv320dac3100_dai_init;
+	data->dai.dai_fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+			    SND_SOC_DAIFMT_CBM_CFM;
+
+	data->card.dev = &pdev->dev;
+	ret = snd_soc_of_parse_card_name(&data->card, "model");
+	if (ret)
+		goto fail;
+	ret = snd_soc_of_parse_audio_routing(&data->card, "audio-routing");
+	if (ret)
+		goto fail;
+	data->card.num_links = 1;
+	data->card.owner = THIS_MODULE;
+	data->card.dai_link = &data->dai;
+	data->card.dapm_widgets = imx_tlv320dac3100_dapm_widgets;
+	data->card.num_dapm_widgets = ARRAY_SIZE(imx_tlv320dac3100_dapm_widgets);
+
+	platform_set_drvdata(pdev, &data->card);
+	snd_soc_card_set_drvdata(&data->card, data);
+
+	ret = devm_snd_soc_register_card(&pdev->dev, &data->card);
+	if (ret) {
+		dev_err(&pdev->dev, "snd_soc_register_card failed (%d)\n", ret);
+		goto fail;
+	}
+
+	of_node_put(cpu_np);
+	of_node_put(codec_np);
+
+	return 0;
+
+fail:
+	if (data && !IS_ERR(data->codec_clk))
+		clk_put(data->codec_clk);
+	if (cpu_np)
+		of_node_put(cpu_np);
+	if (codec_np)
+		of_node_put(codec_np);
+
+	return ret;
+}
+
+static int imx_tlv320dac3100_remove(struct platform_device *pdev)
+{
+	struct snd_soc_card *card = platform_get_drvdata(pdev);
+	struct imx_tlv320dac3100_data *data = snd_soc_card_get_drvdata(card);
+
+#if 1
+	if (data->pll)
+		clk_put(data->pll);
+#endif
+	clk_put(data->codec_clk);
+
+	return 0;
+}
+
+static const struct of_device_id imx_tlv320dac3100_dt_ids[] = {
+	{ .compatible = "fsl,imx-audio-tlv320dac3100", },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, imx_tlv320dac3100_dt_ids);
+
+static struct platform_driver imx_tlv320dac3100_driver = {
+	.driver = {
+		.name = "imx-tlv320dac3100",
+		.owner = THIS_MODULE,
+		.pm = &snd_soc_pm_ops,
+		.of_match_table = imx_tlv320dac3100_dt_ids,
+	},
+	.probe = imx_tlv320dac3100_probe,
+	.remove = imx_tlv320dac3100_remove,
+};
+module_platform_driver(imx_tlv320dac3100_driver);
+
+MODULE_AUTHOR("Shawn Guo <shawn.guo@linaro.org>");
+MODULE_DESCRIPTION("Freescale i.MX SGTL5000 ASoC machine driver");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:imx-tlv320dac3100");
-- 
1.9.1

